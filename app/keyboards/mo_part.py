from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder


class MoPerformerKeyboards:
    def __init__(self) -> None:
        self.kb = ReplyKeyboardBuilder()

    async def main_menu(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def just_cancel(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–û—Ç–º–µ–Ω–∏—Ç—å')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def back_to_violations(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
        self.kb.button(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def back_to_menu(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def check_finished(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def just_back(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def check_or_tasks(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        self.kb.button(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏')
        self.kb.button(text='–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    @staticmethod
    async def get_violation_menu(
        violation_id: str,
        prev_violation_id: str,
        next_violation_id: str
    ) -> InlineKeyboardMarkup:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                                     callback_data=f'allphoto_{violation_id}'),
            ],
            [
                InlineKeyboardButton(text='‚è™Ô∏è', callback_data=f'prev_{prev_violation_id}'),
                InlineKeyboardButton(text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data=f'correct_{violation_id}'),
                InlineKeyboardButton(text='‚è©Ô∏è', callback_data=f'next_{next_violation_id}')
            ],
            [
                InlineKeyboardButton(text='–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f'pending_{violation_id}'),
            ]
        ], row_width=3)
        return kb

    @staticmethod
    async def get_violation_pending_menu(
        violation_id: str,
        prev_violation_id: str,
        next_violation_id: str
    ) -> InlineKeyboardMarkup:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            # [
            #     InlineKeyboardButton(text='‚¨ÖÔ∏è üì∑', callback_data=f'pphoto_{violation_id}'),
            #     InlineKeyboardButton(text='üì∑ ‚û°Ô∏è', callback_data=f'nphoto_{violation_id}')
            # ],
            [
                InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                                     callback_data=f'allphoto_{violation_id}'),
            ],
            [
                InlineKeyboardButton(text='‚è™Ô∏è', callback_data=f'prev_{prev_violation_id}'),
                InlineKeyboardButton(text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data=f'correct_{violation_id}'),
                InlineKeyboardButton(text='‚è©Ô∏è', callback_data=f'next_{next_violation_id}')
            ],
        ], row_width=3)
        return kb

    @staticmethod
    async def get_under_check(check_id: str) -> InlineKeyboardMarkup:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è', callback_data=f'violations_{check_id}'),
            ],
        ])
        return kb

    @staticmethod
    async def get_under_check_zero_violations(check_id: str) -> InlineKeyboardMarkup:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É', callback_data=f'violationszero_{check_id}'),
            ],
        ])
        return kb

    @staticmethod
    async def save_violation_found(violation_found_id: str) -> InlineKeyboardMarkup:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'save_{violation_found_id}'),
            ],
            [
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'cancelsave_{violation_found_id}'),
            ],
        ])
        return kb

    @staticmethod
    async def cancel_correct_mode(violation_found_id: str) -> InlineKeyboardMarkup:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'cancel_{violation_found_id}'),
            ],
        ])
        return kb


class MoControlerKeyboards:
    def __init__(self) -> None:
        self.kb = ReplyKeyboardBuilder()

    def main_menu(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–û—Ç–ø—É—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        self.kb.button(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞')
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def get_report(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç')
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def just_back(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def finish_process(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def choose_employee(self,
                        user_id: int) -> InlineKeyboardMarkup:
        self.kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'choose_employee_{user_id}'),
                ],
            ]
        )
        return self.kb
