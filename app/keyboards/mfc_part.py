from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from app.database.db_helpers.form_menu import (
    get_all_zones,
    get_violation_problems,
    get_zone_violations,
)
from app.view.menu_beautify import ICONS_MAPPING

SPECS = [
    '–ê–∫—É—à–µ—Ä-–≥–∏–Ω–µ–∫–æ–ª–æ–≥ (–¥–µ—Ç—Å–∫–∏–π)',
    '–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥',
    '–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥',
    '–ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
    '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
    '–ö–æ–ª–æ–ø—Ä–æ–∫—Ç–æ–ª–æ–≥',
    '–ù–µ–≤—Ä–æ–ª–æ–≥',
    '–ù–µ—Ñ—Ä–æ–ª–æ–≥ (–¥–µ—Ç—Å–∫–∏–π)',
    '–û—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥',
    '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥',
    '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥',
    '–£—Ä–æ–ª–æ–≥',
    '–£—á–∞—Å—Ç–∫–æ–≤—ã–π –≤—Ä–∞—á',
    '–•–∏—Ä—É—Ä–≥',
    '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥',
    '–≠–•–û-–ö–ì',
    '–≠–ö–ì',
    '–ì–∞—Å—Ç—Ä–æ—Å–∫–æ–ø–∏—è',
    '–•–æ–ª—Ç–µ—Ä',
    '–§–í–î',
    '–§–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏—è',
    '–£–ó–ò',
    '–£–ó–î–ì-–£–ó–î–°-–ë–¶–ê',
    '–°–ú–ê–î',
    '–†–µ–Ω—Ç–≥–µ–Ω',
    '–ú–∞–º–º–æ–≥—Ä–∞—Ñ–∏—è',
    '–ö–¢',
    '–ú–†–¢',
    '–í–∑—è—Ç–∏–µ –∫—Ä–æ–≤–∏',
]


class MfcKeyboards:
    def __init__(self) -> None:
        self.kb = ReplyKeyboardBuilder()

    async def main_menu(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
        self.kb.button(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏')
        self.kb.button(text='–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏')
        self.kb.button(text='–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É –∏–Ω—Ñ–æ–º–∞—Ç–∞')
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def choose_zone(self) -> ReplyKeyboardMarkup:
        zones = await get_all_zones()
        buttons = [
            KeyboardButton(text=f'{ICONS_MAPPING[zone]} {zone}') for zone in zones
        ]
        self.kb.add(*buttons)
        self.kb.button(text='‚õîÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def choose_violation(
        self, zone: str, completed_violations: list
    ) -> ReplyKeyboardMarkup:
        violations = await get_zone_violations(zone=zone)
        buttons = [
            KeyboardButton(
                text=(
                    f'‚úÖ {violation}'
                    if violation in completed_violations
                    else f'{violation}'
                )
            )
            for violation in violations
        ]
        self.kb.button(text='‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∑–æ–Ω—ã')
        self.kb.add(*buttons)
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def choose_problem(
        self, violation_name: str, zone: str, completed_problems: list
    ) -> ReplyKeyboardMarkup:
        problems = await get_violation_problems(violation_name=violation_name, zone=zone)
        buttons = [
            KeyboardButton(
                text=(
                    f'‚úÖ {problem}'
                    if problem in completed_problems
                    else f'{problem}'
                )
            )
            for problem in problems
        ]
        self.kb.button(text='‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –Ω–∞—Ä—É—à–µ–Ω–∏—è')
        self.kb.add(*buttons)
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def add_content(self) -> ReplyKeyboardMarkup:
        buttons = [
            KeyboardButton(text=s) for s in ['–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
        ]
        self.kb.add(*buttons)
        self.kb.button(text='–û—Ç–º–µ–Ω–∏—Ç—å')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def just_back(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def just_cancel(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–û—Ç–º–µ–Ω–∏—Ç—å')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def finish_photo_addition(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def avail_cancel(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–û—Ç–º–µ–Ω–∏—Ç—å')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    async def avail_cancel_yes(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–î–∞')
        self.kb.button(text='–û—Ç–º–µ–Ω–∏—Ç—å')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    @staticmethod
    async def get_specs() -> InlineKeyboardMarkup:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=spec, callback_data=f'spec_{spec}')
                    for spec in SPECS[i: i + 2]
                ]
                for i in range(0, len(SPECS), 2)
            ]
        )
        return kb

    async def photo_added(self) -> InlineKeyboardMarkup:
        self.kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='add_comm_'
                    ),
                ]
            ]
        )
        return self.kb

    async def all_photo_remove(self) -> InlineKeyboardMarkup:
        self.kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='–£–±—Ä–∞—Ç—å', callback_data='remove_allphoto'
                    ),
                ]
            ]
        )
        return self.kb

    async def take_task_to_work(
        self, violation_id: str, is_task: int
    ) -> InlineKeyboardMarkup:
        self.kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                                         callback_data=f'allphoto_{violation_id}'),
                ],
                [
                    InlineKeyboardButton(
                        text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É',
                        callback_data=f'take_{violation_id}_{is_task}',
                    ),
                ],

            ]
        )
        return self.kb

    # async def get_description(self, violation_id: int) -> InlineKeyboardMarkup:
    #     self.kb = InlineKeyboardMarkup(
    #         inline_keyboard=[
    #             [
    #                 InlineKeyboardButton(
    #                     text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
    #                     callback_data=f'description_{violation_id}',
    #                 ),
    #             ]
    #         ]
    #     )
    #     return self.kb

    async def unfinished_check(self, check_id) -> InlineKeyboardMarkup:
        self.kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É',
                        callback_data=f'delete_unfinished_check_{check_id}',
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É',
                        callback_data=f'finish_unfinished_check_{check_id}',
                    ),
                ],
            ]
        )
        return self.kb

    async def comm_added(self) -> InlineKeyboardMarkup:
        self.kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='add_photo_'
                    ),
                ]
            ]
        )
        return self.kb

    async def save_or_cancel(self) -> InlineKeyboardMarkup:
        self.kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save_and_go'),
                ],
                [
                    InlineKeyboardButton(
                        text='–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', callback_data='additional_photo'
                    )
                ],
            ]
        )
        return self.kb

    @staticmethod
    async def get_violation_pending_menu(
        violation_id: str, prev_violation_id: str, next_violation_id: str
    ) -> InlineKeyboardMarkup:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                # [
                #     InlineKeyboardButton(
                #         text="‚¨ÖÔ∏è üì∑", callback_data=f"pphoto_{violation_id}"
                #     ),
                #     InlineKeyboardButton(
                #         text="üì∑ ‚û°Ô∏è", callback_data=f"nphoto_{violation_id}"
                #     ),
                # ],
                [
                    InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                                         callback_data=f'allphoto_{violation_id}'),
                ],
                [
                    InlineKeyboardButton(
                        text='‚è™Ô∏è', callback_data=f'prev_{prev_violation_id}'
                    ),
                    InlineKeyboardButton(
                        text='‚è©Ô∏è', callback_data=f'next_{next_violation_id}'
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ', callback_data='new_'
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º',
                        callback_data=f'back_{violation_id}',
                    ),
                ],
            ]
        )
        return kb


class MfcLeaderKeyboards:
    def __init__(self) -> None:
        self.kb = ReplyKeyboardBuilder()

    def main_menu(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–û—Ç–ø—É—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        self.kb.button(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ú–§–¶')
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def get_period(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥')
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def get_report(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç')
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def just_back(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ù–∞–∑–∞–¥')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def finish_process(self) -> ReplyKeyboardMarkup:
        self.kb.button(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å')
        self.kb.adjust(1)
        return self.kb.as_markup(resize_keyboard=True)

    def choose_employee(self,
                        user_id: int) -> InlineKeyboardMarkup:
        self.kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'choose_employee_{user_id}'),
                ],
            ]
        )
        return self.kb
