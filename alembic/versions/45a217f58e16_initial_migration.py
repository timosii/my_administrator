"""initial migration

Revision ID: 45a217f58e16
Revises: 
Create Date: 2024-05-30 22:32:08.880290

"""
import os
import glob
import pandas as pd
from typing import Sequence, Union
from sqlalchemy.orm import sessionmaker
from alembic import op
import sqlalchemy as sa
from app.database.models.dicts import Mos, Filials, Zones, Violations, ProblemBlocs


class DictsInsert:
    def __init__(self, path: str = "app/database/insert_dicts/data/") -> None:
        if not os.path.exists(path):
            raise FileNotFoundError("Папки со словарями не существует")
        self.path = path
        self.get_dfs()

    def get_dfs(self):
        excel_files = glob.glob(os.path.join(self.path, "*.xlsx"))
        self.dfs = {
            os.path.basename(file).split(".")[0]: pd.read_excel(file)
            for file in excel_files
        }

    def insert_mos(self, session):
        mos = [Mos(**row) for _, row in self.dfs["mos_dict"].iterrows()]
        session.add_all(mos)
        session.commit()

    def insert_fils(self, session):
        fils = [Filials(**row) for _, row in self.dfs["fils_dict"].iterrows()]
        session.add_all(fils)
        session.commit()

    def insert_zones(self, session):
        zones = [Zones(**row) for _, row in self.dfs["zones_dict"].iterrows()]
        session.add_all(zones)
        session.commit()

    def insert_problems(self, session):
        problems = [
            ProblemBlocs(**row) for _, row in self.dfs["problems_dict"].iterrows()
        ]
        session.add_all(problems)
        session.commit()

    def insert_violations(self, session):
        self.dfs["violations_dict"]["time_to_correct"] = pd.to_timedelta(
            self.dfs["violations_dict"]["time_to_correct"]
        ).astype(str)
        violations = [
            Violations(**row) for _, row in self.dfs["violations_dict"].iterrows()
        ]
        session.add_all(violations)
        session.commit()

    def insert_dicts_to_db(self, session):
        self.insert_mos(session)
        self.insert_fils(session)
        self.insert_zones(session)
        self.insert_problems(session)
        self.insert_violations(session)


# revision identifiers, used by Alembic.
revision: str = '45a217f58e16'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('mos',
    sa.Column('mo_', sa.String(length=255), nullable=False),
    sa.Column('mo_population', sa.String(length=255), nullable=False),
    sa.Column('mo_type', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('mo_'),
    schema='dicts'
    )
    op.create_table('problems',
    sa.Column('problem_name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('problem_name'),
    schema='dicts'
    )
    op.create_table('zones',
    sa.Column('zone_name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('zone_name'),
    schema='dicts'
    )
    op.create_table('user',
    sa.Column('id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('mo_', sa.String(length=255), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=255), nullable=False),
    sa.Column('patronymic', sa.String(length=255), nullable=False),
    sa.Column('post', sa.String(length=255), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('is_mfc', sa.Boolean(), nullable=False),
    sa.Column('is_mfc_leader', sa.Boolean(), nullable=False),
    sa.Column('is_mo_performer', sa.Boolean(), nullable=False),
    sa.Column('is_mo_controler', sa.Boolean(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['mo_'], ['dicts.mos.mo_'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='data'
    )
    op.create_table('filials',
    sa.Column('fil_', sa.String(length=255), nullable=False),
    sa.Column('fil_population', sa.String(length=255), nullable=False),
    sa.Column('fil_type', sa.String(length=255), nullable=False),
    sa.Column('mo_', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['mo_'], ['dicts.mos.mo_'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('fil_'),
    schema='dicts'
    )
    op.create_table('violations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('violation_name', sa.String(length=255), nullable=False),
    sa.Column('zone', sa.String(length=255), nullable=False),
    sa.Column('problem', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_photo_mfc', sa.Boolean(), nullable=False),
    sa.Column('is_comment_mfc', sa.Boolean(), nullable=False),
    sa.Column('is_photo_mo', sa.Boolean(), nullable=False),
    sa.Column('is_comment_mo', sa.Boolean(), nullable=False),
    sa.Column('is_no_data_button', sa.Boolean(), nullable=False),
    sa.Column('time_to_correct', sa.Interval(), nullable=False),
    sa.ForeignKeyConstraint(['problem'], ['dicts.problems.problem_name'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['zone'], ['dicts.zones.zone_name'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='dicts'
    )
    op.create_table('check',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('fil_', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('mfc_start', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('mfc_finish', sa.DateTime(), nullable=True),
    sa.Column('mo_user_id', sa.BigInteger(), nullable=True),
    sa.Column('mo_start', sa.DateTime(), nullable=True),
    sa.Column('mo_finish', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fil_'], ['dicts.filials.fil_'], ),
    sa.ForeignKeyConstraint(['user_id'], ['data.user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='data'
    )
    op.create_table('violation_found',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('check_id', sa.BigInteger(), nullable=False),
    sa.Column('violation_id', sa.Integer(), nullable=False),
    sa.Column('photo_id', sa.String(length=255), nullable=True),
    sa.Column('comm', sa.String(), nullable=True),
    sa.Column('photo_id_mo', sa.String(length=255), nullable=True),
    sa.Column('comm_mo', sa.String(), nullable=True),
    sa.Column('violation_detected', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('violation_fixed', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['check_id'], ['data.check.id'], ),
    sa.ForeignKeyConstraint(['violation_id'], ['dicts.violations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='data'
    )
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('violation_found', schema='data')
    op.drop_table('check', schema='data')
    op.drop_table('violations', schema='dicts')
    op.drop_table('filials', schema='dicts')
    op.drop_table('user', schema='data')
    op.drop_table('zones', schema='dicts')
    op.drop_table('problems', schema='dicts')
    op.drop_table('mos', schema='dicts')
    # ### end Alembic commands ###
